openapi: 3.0.3
info:
  title: My Monorepo API
  description: Go + MongoDB backend API
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - database
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        database:
          type: string
          enum: [connected, disconnected]
        version:
          type: string

    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: '507f1f77bcf86cd799439011'
        email:
          type: string
          format: email
          example: 'user@example.com'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'Doe'
        age:
          type: integer
          minimum: 0
          maximum: 150
          example: 30
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'Doe'
        age:
          type: integer
          minimum: 0
          maximum: 150
          example: 30

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'Doe'
        age:
          type: integer
          minimum: 0
          maximum: 150
          example: 30
        isActive:
          type: boolean

    UsersResponse:
      type: object
      required:
        - users
        - total
        - limit
        - offset
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: 'validation_error'
        message:
          type: string
          example: 'Invalid input data'
        details:
          type: object
          additionalProperties: true

  parameters:
    UserIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{24}$'
      description: MongoDB ObjectId

tags:
  - name: Health
    description: Health check endpoints
  - name: Users
    description: User management endpoints
